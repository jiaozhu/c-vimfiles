if(has("win32") || has("win95") || has("win64") || has("win16"))
    let g:vimrc_iswindows=1
else
    let g:vimrc_iswindows=0
endif

set novisualbell                " turn off visual bell
set visualbell t_vb=            " turn off error beep/flash
set showmode                    " display current modes
set scrolloff=3                 " keep 3 lines when scrolling
set backspace=indent,eol,start  " make that backspace key work the way it should
set hlsearch                    " highlight searches
set incsearch                   " do incremental searching
set ignorecase                  " ignore case when searching
set smartcase                   " no ignorecase if Uppercase char present
set background=dark

" 文件修改之后自动载入。
set autoread
" 突出显示当前行
set cursorline
" change the terminal title
set title

"==========================================
" Display Settings 展示/排版等界面格式设置
"==========================================
syntax on
set ruler
set showcmd
" 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set scrolloff=3
set nocompatible
set t_Co=256
" 显示行号
set number

" Vim 7.3以上版本才支持，7.3一下版本不支持 relativenumber
" ##### 相对行号 行号变成相对，可以用 nj  nk   进行跳转 5j   5k 上下跳5行
set relativenumber number
au FocusLost * :set norelativenumber number
au FocusGained * :set relativenumber
" 插入模式下用绝对行号, 普通模式下用相对
autocmd InsertEnter * :set norelativenumber number
autocmd InsertLeave * :set relativenumber
function! NumberToggle()
    if(&relativenumber == 1)
        set norelativenumber number
    else
        set relativenumber
    endif
endfunc
nnoremap <silent> <C-n> :call NumberToggle()<cr>

" 取消换行
set nowrap
" 按词换行
set lbr
" 括号配对情况,跳转并高亮一下匹配的括号
set showmatch
set matchtime=2

" ##### 设置文内智能搜索提示
" 高亮search命中的文本
set hlsearch
" 打开增量搜索模式,随着键入即时搜索
set incsearch
" 搜索时忽略大小写
set ignorecase
" 有一个或以上大写字母时仍大小写敏感
set smartcase


" ##### 缩进配置
" Smart indent
set smartindent
" 打开自动缩进
set autoindent
" never add copyindent, case error   " copy the previous indentation on autoindenting

" ##### tab相关变更
" 设置Tab键的宽度        [等同的空格个数]
set tabstop=4
" 每一次缩进对应的空格数
set shiftwidth=4
" 按退格键时可以一次删掉 4 个空格
set softtabstop=4
" insert tabs on the start of a line according to shiftwidth, not tabstop 按退格键时可以一次删掉 4 个空格
set smarttab
" " 将Tab自动转化成空格    [需要输入真正的Tab键时，使用 Ctrl+V + Tab]
set expandtab
" set noexpandtab
" 缩进时，取整 use multiple of shiftwidth when indenting with '<' and '>'
set shiftround

"==========================================
" FileEncode Settings 文件编码,格式
"==========================================
" 设置新文件的编码为 UTF-8
set encoding=utf-8
" 自动判断编码时，依次尝试以下编码：
set fileencodings=utf-8,ucs-bom,cp936,gb18030,
set helplang=cn
" 这句只影响普通模式 (非图形界面) 下的 Vim。
set termencoding=utf-8
" Use Unix as the standard file type
set ffs=unix,dos,mac
" 如遇Unicode值大于255的文本，不必等到空格再折行
set formatoptions+=m
" 合并两行中文时，不在中间加空格
set formatoptions+=B

" 增强模式中的命令行自动完成操作
set wildmenu
" set wildignore=*.swp,*.bak,*.pyc,*.class,.svn,*.o,*.obj
set wildignore=*.o,*~,*.pyc,*.class		" Ignore compiled files
" 离开插入模式后自动关闭预览窗口
" autocmd InsertLeave * if pumvisible() == 0|pclose|endif
" 打开文件后，定位到上次关闭时的位置
" if this not work ,make sure .viminfo is writable for you
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif


" 去掉搜索高亮
noremap <silent><leader>/ :nohls<CR>

" Identify invisible characters and don't show them by default
set list listchars=eol:¬,tab:▸\ ,trail:.,

" 显示当前行所在函数名信息
fun! ShowFuncName()
  let lnum = line(".")
  let col = col(".")
  echohl ModeMsg
  echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
  echohl None
  call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfun
map f :call ShowFuncName() <CR>


" 插件 nerdtree 显示关闭快捷键
map <F3> <leader>n

" ##### 分屏窗口移动 在vim的各个窗口间切换
map <leader>j <C-W>j
map <leader>k <C-W>k
map <leader>h <C-W>h
map <leader>l <C-W>l

" 防止vim卡顿
set re=1
set ttyfast
set lazyredraw

" eidt my vimrc file
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" sourcing mapping
nnoremap <leader>sv :source $MYVIMRC<cr>
" disabling the old keys *esc*
inoremap <esc> <nop>

iabbrev @@ hi@chinacode.io
iabbrev ccopy Copyright 2019 CHINACODE.io, all rights reserved.

" 插入模式下进入行结尾
inoremap <C-e> <C-o>$
" 插入模式下进入行开始
inoremap <C-a> <C-o>0

"自动关闭 {
function! s:CloseBracket()
    let line = getline('.')
    if line =~# '^\s*\(struct\|class\|enum\) '
        return "{\<Enter>};\<Esc>O"
    elseif searchpair('(', '', ')', 'bmn', '', line('.'))
        " Probably inside a function call. Close it off.
        return "{\<Enter>});\<Esc>O"
    else
        return "{\<Enter>}\<Esc>O"
    endif
endfunction
inoremap <expr> {<Enter> <SID>CloseBracket()


"==========================================
" Theme Settings  主题设置
"==========================================
" Set extra options when running in GUI mode
if has("gui_running")
set guifont=Monaco:h14
if has("gui_gtk2")   "GTK2
    set guifont=Monaco\ 12,Monospace\ 12
endif
set guioptions-=T
set guioptions+=e
set guioptions-=r
set guioptions-=L
set guitablabel=%M\ %t
" 0: 永远不会
" 1: 至少有两个标签页时才会
" 2: 永远会
set showtabline=2
set linespace=4
set noimd
set t_Co=256
endif
" 具体的主题插件参考 .vimrc.bundles 文件
" ##### theme主题

"设置标记一列的背景颜色和数字一行颜色一致
hi! link SignColumn   LineNr
hi! link ShowMarksHLl DiffAdd
hi! link ShowMarksHLu DiffChange

"" for error highlight，防止错误整行标红导致看不清
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline

" ===============================
highlight Pmenu    guibg=darkgrey  guifg=black
highlight PmenuSel guibg=lightgrey guifg=black
highlight Pmenu    ctermbg=darkgrey  ctermfg=black
highlight PmenuSel ctermbg=lightgrey ctermfg=black

" Make comments and special characters look better
highlight Comment    ctermfg=245 guifg=#8a8a8a
highlight NonText    ctermfg=240 guifg=#585858
highlight SpecialKey ctermfg=240 guifg=#585858